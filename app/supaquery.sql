-- Protocol metrics table
CREATE TABLE protocol_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    tvl DECIMAL(20,2) NOT NULL,
    volume24h DECIMAL(20,2) NOT NULL DEFAULT 0,
    fees24h DECIMAL(20,2) NOT NULL DEFAULT 0,
    users24h INTEGER NOT NULL DEFAULT 0,
    chains TEXT[] NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Token metrics table
CREATE TABLE token_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    address VARCHAR NOT NULL,
    symbol VARCHAR NOT NULL,
    name VARCHAR NOT NULL,
    price DECIMAL(20,8) NOT NULL,
    volume24h DECIMAL(20,2) NOT NULL,
    market_cap DECIMAL(20,2) NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Chain metrics table
CREATE TABLE chain_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chain VARCHAR NOT NULL,
    tvl DECIMAL(20,2) NOT NULL,
    transactions24h INTEGER NOT NULL,
    fees24h DECIMAL(20,2) NOT NULL,
    active_addresses24h INTEGER NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- DEX metrics table
CREATE TABLE dex_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    volume24h DECIMAL(20,2) NOT NULL,
    tvl DECIMAL(20,2) NOT NULL,
    trades24h INTEGER NOT NULL,
    unique_traders_24h INTEGER NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Derivatives metrics table
CREATE TABLE derivatives_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    volume24h DECIMAL(20,2) NOT NULL,
    open_interest DECIMAL(20,2) NOT NULL,
    trades24h INTEGER NOT NULL,
    unique_traders_24h INTEGER NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE protocol_mega_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    protocol_name VARCHAR NOT NULL,
    primitive_type VARCHAR NOT NULL CHECK (primitive_type IN ('DEX', 'Lending', 'Derivatives', 'Yield', 'Bridge', 'Other')),
    
    -- Core metrics (aggregated)
    tvl_7d_avg DECIMAL(20,2),
    tvl_change_7d_pct DECIMAL(8,2),
    volume_7d_avg DECIMAL(20,2),
    volume_change_7d_pct DECIMAL(8,2),
    
    -- Risk metrics
    risk_score DECIMAL(5,2), -- 0-100 scale
    security_score DECIMAL(5,2), -- 0-100 scale
    decentralization_score DECIMAL(5,2), -- 0-100 scale
    
    -- Market position
    market_dominance_pct DECIMAL(8,2),
    competitive_advantage TEXT[], -- Array of key advantages
    market_trend VARCHAR CHECK (market_trend IN ('Bullish', 'Bearish', 'Neutral', 'Uncertain')),
    
    -- User metrics
    user_growth_rate_30d DECIMAL(8,2),
    user_retention_rate_30d DECIMAL(8,2),
    avg_user_activity_score DECIMAL(5,2), -- 0-100 scale
    
    -- Financial health
    revenue_sustainability_score DECIMAL(5,2), -- 0-100 scale
    fee_structure_efficiency DECIMAL(5,2), -- 0-100 scale
    treasury_health_score DECIMAL(5,2), -- 0-100 scale
    
    -- Technical analysis
    technical_reliability_score DECIMAL(5,2), -- 0-100 scale
    smart_contract_risk_level VARCHAR CHECK (smart_contract_risk_level IN ('Low', 'Medium', 'High', 'Very High')),
    integration_complexity_score DECIMAL(5,2), -- 0-100 scale
    
    -- AI insights
    key_insights TEXT[], -- Array of important observations
    growth_opportunities TEXT[], -- Array of potential growth areas
    risk_factors TEXT[], -- Array of risk factors
    competitive_analysis JSONB, -- Detailed competitive analysis
    market_positioning JSONB, -- Market position analysis
    
    -- Sentiment analysis
    social_sentiment_score DECIMAL(5,2), -- 0-100 scale
    developer_activity_score DECIMAL(5,2), -- 0-100 scale
    community_engagement_score DECIMAL(5,2), -- 0-100 scale
    
    -- Governance metrics
    governance_participation_rate DECIMAL(8,2),
    proposal_success_rate DECIMAL(8,2),
    voter_diversity_score DECIMAL(5,2), -- 0-100 scale
    
    -- Innovation metrics
    innovation_score DECIMAL(5,2), -- 0-100 scale
    feature_competitiveness_score DECIMAL(5,2), -- 0-100 scale
    adaptation_speed_score DECIMAL(5,2), -- 0-100 scale
    
    -- Metadata
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    data_confidence_score DECIMAL(5,2), -- 0-100 scale
    analysis_version VARCHAR,
    
    -- Constraints
    CONSTRAINT valid_scores CHECK (
        risk_score BETWEEN 0 AND 100 AND
        security_score BETWEEN 0 AND 100 AND
        decentralization_score BETWEEN 0 AND 100 AND
        avg_user_activity_score BETWEEN 0 AND 100 AND
        social_sentiment_score BETWEEN 0 AND 100
    )
);

-- Update lending metrics table schema
DROP TABLE IF EXISTS lending_metrics;
CREATE TABLE lending_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    tvl DECIMAL(20,2) NOT NULL,
    total_borrowed DECIMAL(20,2) NOT NULL,
    total_supplied DECIMAL(20,2) NOT NULL,
    borrow_apy DECIMAL(10,4) NOT NULL,
    supply_apy DECIMAL(10,4) NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS policies for lending metrics
ALTER TABLE lending_metrics ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access on lending_metrics" 
ON lending_metrics FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Allow service role operations on lending_metrics" 
ON lending_metrics FOR ALL 
TO service_role 
USING (true) 
WITH CHECK (true);

-- Create indexes for common queries
CREATE INDEX idx_protocol_metrics_timestamp ON protocol_metrics(timestamp);
CREATE INDEX idx_protocol_metrics_name ON protocol_metrics(name);
CREATE INDEX idx_token_metrics_timestamp ON token_metrics(timestamp);
CREATE INDEX idx_token_metrics_symbol ON token_metrics(symbol);
CREATE INDEX idx_chain_metrics_timestamp ON chain_metrics(timestamp);
CREATE INDEX idx_chain_metrics_chain ON chain_metrics(chain);
CREATE INDEX idx_dex_metrics_timestamp ON dex_metrics(timestamp);
CREATE INDEX idx_derivatives_metrics_timestamp ON derivatives_metrics(timestamp);
CREATE INDEX idx_mega_metrics_protocol ON protocol_mega_metrics(protocol_name);
CREATE INDEX idx_mega_metrics_primitive ON protocol_mega_metrics(primitive_type);
CREATE INDEX idx_mega_metrics_timestamp ON protocol_mega_metrics(timestamp);
CREATE INDEX idx_mega_metrics_risk ON protocol_mega_metrics(risk_score);

-- Add full-text search capability for insights and analysis
CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- Add immutable function for array to string conversion
CREATE OR REPLACE FUNCTION immutable_array_to_string(text[], text)
RETURNS text AS $$
BEGIN
    RETURN array_to_string($1, $2);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Create the index using our immutable function
CREATE INDEX idx_mega_metrics_insights_search ON protocol_mega_metrics 
    USING GIN (immutable_array_to_string(key_insights, ' ') gin_trgm_ops);

-- Create view for quick protocol health overview
CREATE VIEW protocol_health_overview AS
SELECT 
    protocol_name,
    primitive_type,
    risk_score,
    security_score,
    decentralization_score,
    market_trend,
    user_growth_rate_30d,
    revenue_sustainability_score,
    social_sentiment_score,
    innovation_score,
    data_confidence_score,
    timestamp
FROM protocol_mega_metrics
WHERE timestamp = (
    SELECT MAX(timestamp)
    FROM protocol_mega_metrics pm2
    WHERE pm2.protocol_name = protocol_mega_metrics.protocol_name
);


-- Add table comments
COMMENT ON TABLE protocol_metrics IS 'Stores DeFi protocol metrics including TVL, volume, fees, and user data';
COMMENT ON TABLE token_metrics IS 'Stores token metrics including price, volume, and market cap data';
COMMENT ON TABLE chain_metrics IS 'Stores blockchain metrics including TVL, transactions, fees, and active addresses';
COMMENT ON TABLE dex_metrics IS 'Stores DEX-specific metrics including volume, trades, and unique traders';
COMMENT ON TABLE derivatives_metrics IS 'Stores derivatives protocol metrics including volume, open interest, and trading data';
COMMENT ON TABLE protocol_mega_metrics IS 'Stores AI-synthesized comprehensive protocol analysis and metrics';
COMMENT ON COLUMN protocol_mega_metrics.risk_score IS 'Overall risk assessment considering multiple factors (0-100)';
COMMENT ON COLUMN protocol_mega_metrics.key_insights IS 'AI-generated key observations and insights about the protocol';
COMMENT ON COLUMN protocol_mega_metrics.competitive_analysis IS 'Detailed JSON containing competitive analysis data';

-- Enable RLS on all tables
ALTER TABLE protocol_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE token_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE chain_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE dex_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE derivatives_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE protocol_mega_metrics ENABLE ROW LEVEL SECURITY;

-- Protocol Metrics RLS
CREATE POLICY "Allow public read access on protocol_metrics" ON protocol_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- Token Metrics RLS
CREATE POLICY "Allow public read access on token_metrics" ON token_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- Chain Metrics RLS
CREATE POLICY "Allow public read access on chain_metrics" ON chain_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- DEX Metrics RLS
CREATE POLICY "Allow public read access on dex_metrics" ON dex_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- Derivatives Metrics RLS
CREATE POLICY "Allow public read access on derivatives_metrics" ON derivatives_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- Protocol Mega Metrics RLS
CREATE POLICY "Allow public read access on protocol_mega_metrics" ON protocol_mega_metrics
    FOR SELECT
    TO authenticated
    USING (true);

-- Add insert policies for service role only
CREATE POLICY "Allow service role insert on protocol_metrics" ON protocol_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Allow service role insert on token_metrics" ON token_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Allow service role insert on chain_metrics" ON chain_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Allow service role insert on dex_metrics" ON dex_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Allow service role insert on derivatives_metrics" ON derivatives_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

CREATE POLICY "Allow service role insert on protocol_mega_metrics" ON protocol_mega_metrics
    FOR INSERT
    TO service_role
    WITH CHECK (true);

-- Add update policies for service role only
CREATE POLICY "Allow service role update on protocol_metrics" ON protocol_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow service role update on token_metrics" ON token_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow service role update on chain_metrics" ON chain_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow service role update on dex_metrics" ON dex_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow service role update on derivatives_metrics" ON derivatives_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow service role update on protocol_mega_metrics" ON protocol_mega_metrics
    FOR UPDATE
    TO service_role
    USING (true)
    WITH CHECK (true);

-- Add RLS policies for derivatives metrics
ALTER TABLE derivatives_metrics ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access on derivatives_metrics" 
ON derivatives_metrics FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Allow service role operations on derivatives_metrics" 
ON derivatives_metrics FOR ALL 
TO service_role 
USING (true) 
WITH CHECK (true);

-- Drop existing constraints if they exist
ALTER TABLE protocol_metrics DROP CONSTRAINT IF EXISTS protocol_metrics_name_key;
ALTER TABLE token_metrics DROP CONSTRAINT IF EXISTS token_metrics_address_key;
ALTER TABLE dex_metrics DROP CONSTRAINT IF EXISTS dex_metrics_name_key;
ALTER TABLE lending_metrics DROP CONSTRAINT IF EXISTS lending_metrics_name_key;
ALTER TABLE derivatives_metrics DROP CONSTRAINT IF EXISTS derivatives_metrics_name_key;
ALTER TABLE chain_metrics DROP CONSTRAINT IF EXISTS chain_metrics_chain_key;

-- Drop existing indexes if they exist
DROP INDEX IF EXISTS idx_protocol_metrics_timestamp;
DROP INDEX IF EXISTS idx_token_metrics_timestamp;
DROP INDEX IF EXISTS idx_dex_metrics_timestamp;
DROP INDEX IF EXISTS idx_lending_metrics_timestamp;
DROP INDEX IF EXISTS idx_derivatives_metrics_timestamp;
DROP INDEX IF EXISTS idx_chain_metrics_timestamp;

-- Clean up duplicates
WITH ranked_protocols AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY name ORDER BY timestamp DESC) as rn
  FROM protocol_metrics
)
DELETE FROM protocol_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_protocols 
  WHERE rn > 1
);

WITH ranked_tokens AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY address ORDER BY timestamp DESC) as rn
  FROM token_metrics
)
DELETE FROM token_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_tokens 
  WHERE rn > 1
);

WITH ranked_dexes AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY name ORDER BY timestamp DESC) as rn
  FROM dex_metrics
)
DELETE FROM dex_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_dexes 
  WHERE rn > 1
);

WITH ranked_lending AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY name ORDER BY timestamp DESC) as rn
  FROM lending_metrics
)
DELETE FROM lending_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_lending 
  WHERE rn > 1
);

WITH ranked_derivatives AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY name ORDER BY timestamp DESC) as rn
  FROM derivatives_metrics
)
DELETE FROM derivatives_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_derivatives 
  WHERE rn > 1
);

WITH ranked_chains AS (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY chain ORDER BY timestamp DESC) as rn
  FROM chain_metrics
)
DELETE FROM chain_metrics
WHERE id IN (
  SELECT id 
  FROM ranked_chains 
  WHERE rn > 1
);

-- Add unique constraints
ALTER TABLE protocol_metrics ADD CONSTRAINT protocol_metrics_name_key UNIQUE (name);
ALTER TABLE token_metrics ADD CONSTRAINT token_metrics_address_key UNIQUE (address);
ALTER TABLE dex_metrics ADD CONSTRAINT dex_metrics_name_key UNIQUE (name);
ALTER TABLE lending_metrics ADD CONSTRAINT lending_metrics_name_key UNIQUE (name);
ALTER TABLE derivatives_metrics ADD CONSTRAINT derivatives_metrics_name_key UNIQUE (name);
ALTER TABLE chain_metrics ADD CONSTRAINT chain_metrics_chain_key UNIQUE (chain);

-- Add timestamp indexes
CREATE INDEX idx_protocol_metrics_timestamp ON protocol_metrics(timestamp DESC);
CREATE INDEX idx_token_metrics_timestamp ON token_metrics(timestamp DESC);
CREATE INDEX idx_dex_metrics_timestamp ON dex_metrics(timestamp DESC);
CREATE INDEX idx_lending_metrics_timestamp ON lending_metrics(timestamp DESC);
CREATE INDEX idx_derivatives_metrics_timestamp ON derivatives_metrics(timestamp DESC);
CREATE INDEX idx_chain_metrics_timestamp ON chain_metrics(timestamp DESC);