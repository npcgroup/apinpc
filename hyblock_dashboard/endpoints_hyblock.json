{
    "swagger": "2.0",
    "info": {
      "description": "*Query params are case insensitive in all the APIs Endpoints.*",
      "version": "v1",
      "title": "All API Endpoints"
    },
    "host": "api1.hyblockcapital.com",
    "basePath": "/v1",
    "schemes": ["https"],
    "securityDefinitions": {
      "Client Credentials": {
        "type": "oauth2",
        "flow": "application",
        "tokenUrl": "https://auth-api.hyblockcapital.com/oauth2/token",
        "scopes": {}
      },
      "Api Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "paths": {
      "/asksIncreaseDecrease": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "asksIncreaseDecrease.get",
          "description": "Change in orderbook Asks over a specific time period. The mathematical formula is Current Ask - Previous Ask",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin, All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.<br/> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20). If no depth entered.</br> Default: (0,full)",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/asksIncreaseDecrease"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidAsk": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidAsk.get",
          "description": "A bid (or limit buy) is a “passive” buyer who advertises the price and size they would like to buy at. An asks (or limit sell) is a “passive” seller who advertises the price and size they would like to sell at.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin, All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.<br/> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20). If no depth entered.</br> Default: (0,full)",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidAsk"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidsIncreaseDecrease": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidsIncreaseDecrease.get",
          "description": "Change in orderbook Bids over a specific time period. The mathematical formula is Current Bid - Previous Bid",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin, All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.<br/> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20). If no depth entered.</br> Default: (0,full)",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidsIncreaseDecrease"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidAskRatio": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidAskRatio.get",
          "description": "Bid Ask Ratio is an oscillator that ranges from -1 to 1. The mathematical formula is (Bids - Asks) / (Bids + Asks).",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please enter the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20).If no depth entered.</br> Default: (0,full).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please enter limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidAskRatio"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal Server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidAskDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidAskDelta.get",
          "description": "Evaluate the immediate disparity between buy and sell orders.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20).If no depth entered.</br> Default: (0,full).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please enter limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidAskDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal Server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidAskRatioDiff": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidAskRatioDiff.get",
          "description": "Change in orderbook bid ask ratio over a specified period of time",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20).If no depth entered.</br> Default: (0,full).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidAskRatioDiff"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/combinedBook": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "combinedBook.get",
          "description": "A consolidated perspective of the market's orderbook dynamics.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "depth",
              "in": "query",
              "description": "Required depth in tuple with two paremeters. All the valid tuples are [0, quote, 1, 2, 5, 10, 20, full]. If we pass depth '0,full' in the depth tuple then we will get all the depth from (quote, 1, 5, 10, 20, full) and if we pass depth 'quote,20' in the depth tuple then we will get all the depth from (quote, 1, 2, 5, 10, 20).If no depth entered.</br> Default: (0,full).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/combinedBook"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal Server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bvol": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Options"],
          "operationId": "bvol.get",
          "description": "Users can use Binanec Volatility Inex to gauge market sentiments, improve risk management, and make more informed trading decisions on Binance Options. A high BVOL indicates that significant price changes are anticipated, while a low BVOL suggests minor price fluctuations are expected.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bvol"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal Server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/dvol": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Options"],
          "operationId": "dvol.get",
          "description": "This deribit implied volatility index uses the implied volatility smile of the relevant expiries to output one number that gives a gauge of the 30 day annualised implied volatility. The DVOL is forward-looking volatility. What does the calculated value mean? It gives the 30 day (forward-looking) annualised expectation of volatilit.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/dvol"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal Server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/botTracker": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "botTracker.get",
          "description": "This indicator detects potential bot activity by tracking unique order sizes that repeat frequently within short time frames. For instance, if a market order of size $57,889 appears five times in one minute, it is flagged as bot activity.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/botTracker"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/buyVolume": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "buyVolume.get",
          "description": "Aggregates the volume from market buy orders, summing the size of every market order on the buy side to reflect buying pressure.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/buyVolume"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/klines": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "klines.get",
          "description": "Candlestick price chart data. Open is the first price during the time period (candle), high is the highest price, low is the lowest price, and close is the last price.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/klines"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/sellVolume": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "sellVolume.get",
          "description": "Aggregates the volume from market sell orders, summing the size of every market order on the sell side to reflect selling pressure.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/sellVolume"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/volumeDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "volumeDelta.get",
          "description": "Calculates the difference between buy and sell volume, revealing which side (buy or sell) holds dominance in the market.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/volumeDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredCVD": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "anchoredCVD.get",
          "description": "Calculates the Cumulative Volume Delta (CVD), anchored daily, 4-hourly, or hourly (UTC timezone), enabling users to easily track volume shifts relative to previous periods for trend analysis.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredCVD"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/marketOrderCount": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "marketOrderCount.get",
          "description": "This indicator measures the count (number) of market orders executed for a specific ticker within a set time period, providing insights into aggressive buying or selling pressure.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/marketOrderCount"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/limitOrderCount": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "limitOrderCount.get",
          "description": "This indicator measures the count (number) of limit orders executed for a specific ticker within a set time period, providing insights into passive buying or selling pressure.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/marketOrderCount"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/marketOrderAverageSize": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "marketOrderAverageSize.get",
          "description": "This metric calculates the average size of market orders for a given ticker over a specified time period or candle, providing insight into typical market order size during that interval.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/marketOrderAverageSize"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/limitOrderAverageSize": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "limitOrderAverageSize.get",
          "description": "This metric calculates the average size of limit orders for a given ticker over a specified time period or candle, providing insight into typical limit order size during that interval.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/marketOrderAverageSize"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/pdLevels": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "pdLevels.get",
          "description": "Tracks key technical levels from the previous day (UTC). These key levels are previous day high, previous day low, previous day open, and previous day equilibrium (which is the average of high and low).",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/pdLevels"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/pwLevels": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "pwLevels.get",
          "description": "Tracks key technical levels from the previous week (UTC). These key levels are previous week high, previous week low, previous week open, and previous week equilibrium (which is the average of high and low).",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/pwLevels"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/pmLevels": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "pmLevels.get",
          "description": "Tracks key technical levels from the previous month (UTC). These key levels are previous month high, previous month low, previous month open, and previous month equilibrium (which is the average of high and low).",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/pmLevels"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/slippage": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "slippage.get",
          "description": "Slippage is the difference between the expected price of a trade and the actual price at which the trade is executed, which can occur due to delays or insufficient liquidity in the market.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "tradeType",
              "in": "query",
              "description": "Please select valid tradeType By default 'all'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "all",
              "enum": ["all", "buy", "sell", "delta"]
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/slippage"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/openInterest": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Open Interest"],
          "operationId": "openInterest.get",
          "description": "Open Interest (OI) is the contracts (or positions) open (or outstanding) in the market.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/openInterest"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/openInterestDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Open Interest"],
          "operationId": "openInterestDelta.get",
          "description": "Change in open interest over a specific time period.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/openInterestDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredOIDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Open Interest"],
          "operationId": "anchoredOIDelta.get",
          "description": "Measures Open Interest Delta (OIDelta) anchored daily, 4-hourly, or hourly (UTC timezone), offering comparative insights into open interest changes against prior periods.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredOIDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/cumulativeLiqLevel": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "cumulativeLiqLevel.get",
          "description": "Shows the general statistics of predicted liquidation levels, including the number of open long and short liquidation levels by size and count and the differences between them.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin, All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timestamp",
              "in": "query",
              "description": "Please enter the valid timestamp.If you do not enter any timestamp the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "leverage",
              "in": "query",
              "description": "Please enter the valid leverage.You can entered single or multiple parementers with comma seprated (e.g. 25,50,100,all).",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/cumulativeLiqLevel"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/liquidationLevels": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "liquidationLevels.get",
          "description": "Liquidation Levels are estimates of potential price levels where liquidation events may occur.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timestamp",
              "in": "query",
              "description": "Please enter the valid timestamp.If you do not enter any timestamp the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "leverage",
              "in": "query",
              "description": "Please select the valid leverage.You can entered single or multiple parementers with comma seprated (e.g. 25,50,100,all).",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "position",
              "in": "query",
              "description": "Please select the valid position.You can entered only single parementer (e.g. long,short,all).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "all",
              "enum": ["long", "short", "all"]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/liquidationLevels"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/liquidation": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "liquidation.get",
          "description": "Event where a trader’s leveraged position is forced to close, due to margin not being enough to cover the loss.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the timeframe.",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "bucket",
              "in": "query",
              "description": "You can enter one or multiple buckets with comma seperated, you can add the buckets. so if user types in 1,2,3 it will do 1+2+3 as a sum. \n1 = 0-100\n2=100-1k\n3 = 1k-10k\n4=10k-100k\n5= 100k-1m\n6=1m-10m\n7= >10m.</br> Default: All",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/liquidation"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/liquidationHeatmap": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "liquidationHeatmap.get",
          "description": "The Liquidation Heatmap calculates the liquidation levels based on market data and different leverage amounts. The calculated levels are then added to a price bucket on the chart.",
          "parameters": [
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "lookback",
              "in": "query",
              "description": "Please select valid lookback (e.g. 12h, 7d, 1m, 3m, 6m, 1y, 2y).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["12h", "7d", "1m", "3m", "6m", "1y", "2y"]
            },
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "ohlcgraph",
              "in": "query",
              "description": "Please enter the valid OHLCGraph, Defaults to the first exchange or only exchange input.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "enum": ["Binance", "Bitmex", "Bybit"]
            },
            {
              "name": "leverage",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid leverage. By default: [L1, L2, L3, L4, L5]",
              "required": false,
              "format": "JSON"
            },
            {
              "name": "timestamp",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid timestamp.If you do not enter any timestamp the default will be the current time (e.g. 1661236020).",
              "required": false,
              "format": "JSON"
            },
            {
              "name": "scaling",
              "in": "query",
              "description": "Please select valid scale, Default is 'relative'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "enum": ["relative", "max"]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/liquidationHeatmap"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/averageLeverageUsed": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "averageLeverageUsed.get",
          "description": "This metric shows the average leverage used in long and short positions by top traders, identified as those within the top percentage holding the largest open position values.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/averageLeverageUsed"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/averageLeverageDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "averageLeverageDelta.get",
          "description": " This metric captures the difference between the average leverage used in long and short positions by top traders, highlighting which side is utilizing more leverage.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/averageLeverageDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/fundingRate": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Funding Rate"],
          "operationId": "fundingRate.get",
          "description": "Periodic payments between long and short traders to make perpetual futures price stay in sync with index (spot) price.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "aggregationType",
              "in": "query",
              "description": "Please select the aggregationType By Default Sum (e.g. Sum,Average).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "default": "Sum",
              "enum": ["Average", "Sum"]
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/fundingRate"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/binanceGlobalAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "binanceGlobalAccounts.get",
          "description": "This measures the total number of *accounts* that are long or short on Binance. So for example, if there are 1million accounts on Binance and 600k of them are net long, then the global accounts long% is 60% (and short% = 40%). Each account gets one 'vote'.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/binanceGlobalAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredBinanceGlobalAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredBinanceGlobalAccounts.get",
          "description": "This measures the total number of accounts that are long or short on Binance in respect of an anchored period (i.e. daily/4hourly/hourly). It resets at the start of the anchor period. and then take  the cumulative sum from there. so if long% at the start of the day is 67% and goes to 73% end of day, then goes to 65% the next day. the anchor on day 1 would go from 0 to 13 and on day2 would go from 0 to -8.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredBinanceGlobalAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/binanceTopTraderAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "binanceTopTraderAccounts.get",
          "description": "This measures the total number of *top trader accounts* that are long (or short) on Binance. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Binance classifies top traders as accounts with the top20% in margin (or balance). This indicator is similar to Global Long Accounts with the only difference being that it focuses on the top 20% accounts.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/binanceTopTraderAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredBinanceTopTraderAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredBinanceTopTraderAccounts.get",
          "description": "This measures the total number of top trader accounts that are long (or short) on Binance. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Binance classifies top traders as accounts with the top20% in margin (or balance). This indicator is similar to Global Long Accounts with the only difference being that it focuses on the top 20% accounts.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredBinanceTopTraderAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/binanceTopTraderPositions": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "binanceTopTraderPositions.get",
          "description": "This measures the total number of *top trader positions* that are long (or short) on Binance. The key difference here is that instead of looking at accounts, it instead looks at positions.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/binanceTopTraderPositions"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredBinanceTopTraderPositions": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredBinanceTopTraderPositions.get",
          "description": "This measures the total number of top trader positions that are long (or short) on Binance. The key difference here is that instead of looking at accounts, it instead looks at positions. It resets at the start of the anchor period. and then take  the cumulative sum from there.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredBinanceTopTraderPositions"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/binanceTrueRetailLongShort": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "binanceTrueRetailLongShort.get",
          "description": "This metric shows the percentage of retail accounts in long versus short positions, with each account equally contributing one vote, regardless of position size.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/binanceTrueRetailLongShort"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/binanceWhaleRetailDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "binanceWhaleRetailDelta.get",
          "description": "This is the difference between top trader positions long% ('whales') and global accounts long% ('retail').",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/binanceWhaleRetailDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredBinanceWhaleRetailDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredBinanceWhaleRetailDelta.get",
          "description": "It resets at the start of the anchor period. and then take  the cumulative sum from there.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter only single exchange, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredBinanceWhaleRetailDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/traderSentimentGap": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "traderSentimentGap.get",
          "description": "Highlights the sentiment divergence between larger, more influential accounts and smaller retail accounts. Provides a measure of how positioning sentiment differs between these two groups, offering insights into whether they are aligned or moving in opposite directions. Helps identify potential behavioral patterns across different trader segments, revealing shifts in market sentiment that may not be immediately apparent from broader metrics.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/traderSentimentGap"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/whalePositionDominance": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "whalePositionDominance.get",
          "description": "Evaluates the influence of larger positions in the market compared to broader account-level sentiment among prominent traders. Offers insights into whether larger positions are exerting outsized influence on the market relative to the overall positioning of significant accounts. Serves as a proxy for whale activity, helping users understand how concentrated larger positions are and whether they align with broader sentiment trends.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/whalePositionDominance"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bybitGlobalAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "bybitGlobalAccounts.get",
          "description": "This measures the total number of accounts that are long or short on Bybit. So for example, if there are 1 million accounts on Bybit and 600k of them are net long, then the global accounts long% is 60% (and short% = 40%). Each account gets one 'vote'.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bybitGlobalAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/huobiTopTraderAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "huobiTopTraderAccounts.get",
          "description": "This measures the total number of *top trader accounts* that are long (or short) on Huobi. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Huobi classifies top traders: 'top traders are those part of exclusive, invite-only club meant for quantitative, institutional investors and other elite level traders participating in Huobi’s platform.'",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/huobiTopTraderAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/huobiTopTraderAccountsQuarterly": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "huobiTopTraderAccountsQuarterly.get",
          "description": "",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/huobiTopTraderAccountsQuarterly"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/huobiTopTraderPositions": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "huobiTopTraderPositions.get",
          "description": "This measures the total number of *top trader positions* that are long (or short) on Huobi. The key difference here is that instead of looking at accounts, it instead looks at positions. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Huobi classifies top traders: 'top traders are those part of exclusive, invite-only club meant for quantitative, institutional investors and other elite level traders participating in Huobi’s platform.'",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/huobiTopTraderPositions"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/huobiTopTraderPositionsQuarterly": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "huobiTopTraderPositionsQuarterly.get",
          "description": "This measures the total number of *top trader positions* that are long (or short) on Huobi Quarterly Futures contract. The key difference here is that instead of looking at accounts, it instead looks at positions. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Huobi classifies top traders: 'top traders are those part of exclusive, invite-only club meant for quantitative, institutional investors and other elite level traders participating in Huobi’s platform.'",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/huobiTopTraderPositionsQuarterly"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/netLongShort": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "netLongShort.get",
          "description": "Estimated net longs and net shorts derived from taker orders & open interest.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/netLongShort"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredCLS": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredCLS.get",
          "description": "Tracks the cumulative sum of net longs and shorts (CLS) with a daily, 4-hourly, or hourly anchor (UTC timezone), facilitating historical comparison of trading activity.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredCLS"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/netLongShortDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "netLongShortDelta.get",
          "description": "The difference between Net Longs and Net Shorts.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/netLongShortDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredCLSD": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "anchoredCLSD.get",
          "description": "Provides the Cumulative Long Short Delta (CLSD), resetting at specified intervals (UTC timezone), allowing clearer insights into net long versus short positioning trends over time.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredCLSD"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/okxGlobalAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "okxGlobalAccounts.get",
          "description": "This measures the total number of *accounts* that are long (or short) on Okx. So for example, if there are 1million accounts on Okx and 600k of them are net long, then the global accounts long% is 60% (and short% = 40%). Each account gets one 'vote'",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/okxGlobalAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/okxTopTraderAccounts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "okxTopTraderAccounts.get",
          "description": "This measures the total number of top trader accounts that are long (or short) on Okx. Note, top traders do not necessarily mean the best traders or those with the highest profits, but rather Okx classifies top traders as the top 5% of traders. This indicator is similar to Global Long Accounts with the only difference being that it focuses on the top 5% of trader account (based on size), instead of all accounts.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/okxTopTraderAccounts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/okxWhaleRetailDelta": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Longs and Shorts"],
          "operationId": "okxWhaleRetailDelta.get",
          "description": "This is the difference between top trader accounts long% ('whales') and global accounts long% ('retail').",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/okxWhaleRetailDelta"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bitmexLeaderboardNotionalProfit": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "bitmexLeaderboardNotionalProfit.get",
          "description": "The Bitmex Notional Leaderboard show the most profitable all-time traders on BitMEX in terms of notional value (only active and verified accounts are included). Unless a user has chosen to display their real name, an account pseudonym is used.",
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "Leaderboard Notional Profit user Positions [Bitmex], By default value is 'all'.",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size By Default: 50.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bitmexLeaderboardNotionalProfit"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bitmexLeaderboardROEProfit": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "bitmexLeaderboardROEProfit.get",
          "description": "The Bitmex ROE Leaderboard show the most profitable all-time traders on BitMEX in terms of ROE or return on equity (only active and verified accounts are included). Unless a user has chosen to display their real name, an account pseudonym is used.",
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "Leaderboard ROE Profit user Positions [Bitmex], By default value is 'all'.",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size By Default: 50.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bitmexLeaderboardROEProfit"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/fearAndGreed": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "fearAndGreed.get",
          "description": "The Crypto Fear and Greed Index assigns a score ranging from 0 to 100, which gauges the sentiment surrounding Bitcoin, from extreme fear to extreme greed.",
          "parameters": [
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/fearAndGreed"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/marginLendingRatio": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "marginLendingRatio.get",
          "description": "This indicator shows the ratio of cumulative data value between BTC/USDT leverage quote currency (USDT) and underlying asset (BTC) over a given period of time.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/marginLendingRatio"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/trollbox": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "trollbox.get",
          "description": "The long and short positions posted in the Bitmex chat (trollbox) that are real positions verified by Bitmex. This is aggregated across all users or filtered on a specific user.",
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "Please enter a valid user (ie. 'AraMisCoin'). If you do not enter any users, the default will be the aggregate of all users during that timeframe. For a list of users, please refer to the settings option in 'Trollbox User Positions [Bitmex]' indicator, on our primary charting tool.</br> Default: All users",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/trollbox"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/userBotRatio": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "userBotRatio.get",
          "description": "This indicator shows the number of users and bots (via api) connected to Bitmex and the ratio between them.",
          "parameters": [
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/userBotRatio"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/stablecoinPremiumP2P": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "stablecoinPremiumP2P.get",
          "description": "The relative ratio of USDT and USDC relative to the 1:1 USD peg, otherwise known as 'premium', on the Okx peer-to-peer market.",
          "parameters": [
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/stablecoinPremiumP2P"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/wbtcMintBurn": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Sentiment"],
          "operationId": "wbtcMintBurn.get",
          "description": "Wrapped Bitcoin (WBTC) is an ERC20 token backed 1:1 with Bitcoin. Track when wBTC is minted (btc is exchanged to create wBTC) and burned (wBTC is swapped back for BTC) across a variety of members (approved entities).",
          "parameters": [
            {
              "name": "member",
              "in": "query",
              "description": "wBTC Mint & Burn Member Positions [Bitmex]. </br> Default: All members",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe By Default 1m (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/wbtcMintBurn"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/openInterestProfile": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Profile Tool"],
          "operationId": "openInterestProfile.get",
          "description": "Open Interest Profile identifies where positions have opened or closed historically rather than showing where market buying and market selling.",
          "parameters": [
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": true,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "lookback",
              "in": "query",
              "description": "Please select the valid lookback (e.g. d,w,mo,qtr).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "d",
              "enum": ["d", "w", "mo", "qtr"]
            },
            {
              "name": "profileType",
              "in": "query",
              "description": "Please select the valid profileType.",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["oidelta", "openpositions"]
            },
            {
              "name": "precision",
              "in": "query",
              "description": "Please select the valid precision.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "0",
              "enum": ["0", "1", "2", "3", "4", "5", "6"]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/openInterestProfile"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/volumeProfile": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Profile Tool"],
          "operationId": "volumeProfile.get",
          "description": "Volume Profile shows the amount of buying and selling at each price level.",
          "parameters": [
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "lookback",
              "in": "query",
              "description": "Please select the valid lookback (e.g. d,w,mo,qtr).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "d",
              "enum": ["d", "w", "mo", "qtr"]
            },
            {
              "name": "profileType",
              "in": "query",
              "description": "Please select the valid profileType.",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["volume", "volumedelta"]
            },
            {
              "name": "precision",
              "in": "query",
              "description": "Please select the valid precision.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "0",
              "enum": ["0", "1", "2", "3", "4", "5", "6"]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/volumeProfile"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/transferofcontracts": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "transferofcontracts.get",
          "description": "This metric captures the absolute difference between volume and open interest, highlighting the volume involved in contract transfers that do not alter the net open interest.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/transferofcontracts"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/participationratio": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderflow"],
          "operationId": "participationratio.get",
          "description": "This metric indicates the percentage of volume attributed to net position openings by dividing OI Delta by Volume, showing the share of total volume represented by open interest changes.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/participationratio"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredLLC": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "anchoredLLC.get",
          "description": "Anchored Liq Level Count shows the number of buying and selling by dividing the OI Delta from Volume.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            },
            {
              "name": "level",
              "in": "query",
              "description": "Please enter the level long or short. If you do not enter any value the default will be 'long'",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "long"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredLLC"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredLLS": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "anchoredLLS.get",
          "description": "Tracks the cumulative sum of size with a daily, 4-hourly, or hourly anchor (UTC timezone), facilitating historical comparison of trading activity.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            },
            {
              "name": "level",
              "in": "query",
              "description": "Please enter the level long or short. If you do not enter any value the default will be 'long'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "long"
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredLLS"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredCLLCD": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "anchoredCLLCD.get",
          "description": "Anchored Liq Level Count shows the number of buying and selling by dividing the OI Delta from Volume.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredCLLCD"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/anchoredCLLSD": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Liquidity"],
          "operationId": "anchoredCLLSD.get",
          "description": "Anchored Liq Level Count shows the number of buying and selling by dividing the OI Delta from Volume.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            },
            {
              "name": "anchor",
              "in": "query",
              "description": "Please enter the anchor period (e.g. 1d, 1h, 4h). If you do not enter any value the default will be '1d'.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "1d"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/anchoredCLLSD"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/bidsAskSpread": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Orderbook"],
          "operationId": "bidsAskSpread.get",
          "description": "Anchored Liq Level Count shows the number of buying and selling by dividing the OI Delta from Volume.",
          "parameters": [
            {
              "name": "coin",
              "in": "query",
              "type": "string",
              "description": "Please enter the valid coin. All the supported coins with their respective exchanges can be fetched via “/catalog” endpoint.",
              "required": true,
              "format": "JSON"
            },
            {
              "name": "timeframe",
              "in": "query",
              "description": "Please select the valid timeframe (e.g. 1m, 5m, 15m, 1h, 4h, 1d).",
              "required": true,
              "type": "string",
              "format": "JSON",
              "enum": ["1m", "5m", "15m", "1h", "4h", "1d"]
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter the valid exchange, you can enter single or multiple exchanges with comma seperated, All the supported exchanges with their respective coins can be fetched via “/catalog” endpoint.</br> Default: All exchanges",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "marketTypes",
              "in": "query",
              "description": "Please select the valid marketTypes (e.g. All, Spot, Perpetuals).",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "All",
              "enum": ["All", "Spot", "Perpetuals"]
            },
            {
              "name": "sort",
              "in": "query",
              "description": "If desc, will sort results newest first.",
              "required": false,
              "type": "string",
              "format": "JSON",
              "default": "asc",
              "enum": ["asc", "desc"]
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Please enter the valid startTime.If you do not enter any startTime the default will be the current time (e.g. 1661236020).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Please enter the valid endTime.If you do not enter any endTime the default will be the current time (e.g. 1661236035).",
              "required": false,
              "type": "number",
              "format": "JSON"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Please select the limit size.",
              "required": false,
              "type": "number",
              "format": "JSON",
              "default": 50,
              "enum": [5, 10, 20, 50, 100, 500, 1000]
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/bidsAskSpread"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/catalog": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["Catalog"],
          "operationId": "catalog.get",
          "description": "List of supported symbols, endpoinNames, and exchanges.",
          "parameters": [
            {
              "name": "endpointName",
              "in": "query",
              "type": "string",
              "description": "Please enter valid endpointName.</br> Default: List of all endpointNames.",
              "required": false,
              "format": "JSON"
            },
            {
              "name": "exchange",
              "in": "query",
              "description": "Please enter valid exchange name. Multiple exchanges are supported.</br> Default: List of all exchanges.",
              "required": false,
              "type": "string",
              "format": "JSON"
            },
            {
              "name": "symbol",
              "in": "query",
              "description": "Please enter valid symbol, Multiple symbols are supported.</br> Default: List of all symbols.",
              "required": false,
              "type": "string",
              "format": "JSON"
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/catalog"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      },
      "/remainingHitBalance": {
        "get": {
          "security": [
            {
              "Client Credentials": []
            },
            {
              "Api Key": []
            }
          ],
          "tags": ["apiUsage"],
          "operationId": "remainingHitBalance.get",
          "description": "This endpoint retrieves the current remaining hit balance for the authenticated user. Hits represent units of usage for the API service, and this endpoint provides information on the number of remaining hits available within the current usage cycle. \n\n**Note:** It may take around 30 minutes for the remaining hits to be updated.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Request was successful",
              "schema": {
                "$ref": "#/definitions/remainingHitBalance"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/Error400"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/Error401"
              }
            },
            "403": {
              "description": "Access Denied",
              "schema": {
                "$ref": "#/definitions/Error403"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/Error404"
              }
            },
            "429": {
              "description": "Limit Exceeded",
              "schema": {
                "$ref": "#/definitions/Error429"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/Error500"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "asksIncreaseDecrease": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724223600
          },
          "asks_increase_decrease": {
            "type": "number",
            "example": 5048640.743506074
          }
        }
      },
      "bidAsk": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724223600
          },
          "ask": {
            "type": "number",
            "example": 347768395.98476046
          },
          "bid": {
            "type": "number",
            "example": 481190189.74814093
          }
        }
      },
      "bidsIncreaseDecrease": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724246280
          },
          "bids_increase_decrease": {
            "type": "number",
            "example": 31868487.71439886
          }
        }
      },
      "bidAskRatio": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "bidAskRatio": {
            "type": "number",
            "example": 0.14752672038637354
          }
        }
      },
      "bidAskDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695711720
          },
          "bidAskDelta": {
            "type": "number",
            "example": -35945460.68240702
          }
        }
      },
      "bidAskRatioDiff": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "bidAskRatioDiff": {
            "type": "number",
            "example": -163215377.8376366
          }
        }
      },
      "combinedBook": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695717720
          },
          "combinedBook": {
            "type": "number",
            "example": 589398610.0514098
          }
        }
      },
      "bvol": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695892500
          },
          "open": {
            "type": "number",
            "example": 39.83476124
          },
          "high": {
            "type": "number",
            "example": 39.88290896
          },
          "low": {
            "type": "number",
            "example": 39.83478107
          },
          "close": {
            "type": "number",
            "example": 39.88290896
          }
        }
      },
      "dvol": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695893940
          },
          "open": {
            "type": "number",
            "example": 38.52
          },
          "high": {
            "type": "number",
            "example": 38.52
          },
          "low": {
            "type": "number",
            "example": 38.49
          },
          "close": {
            "type": "number",
            "example": 38.49
          }
        }
      },
      "botTracker": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691658180
          },
          "Total": {
            "type": "number",
            "example": 3
          },
          "Buy": {
            "type": "number",
            "example": 3
          },
          "Sell": {
            "type": "number",
            "example": 0
          },
          "Delta": {
            "type": "number",
            "example": 3
          }
        }
      },
      "buyVolume": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "buyVolume": {
            "type": "number",
            "example": 39101.67570000001
          }
        }
      },
      "klines": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1692344580
          },
          "open": {
            "type": "number",
            "example": 56.31
          },
          "close": {
            "type": "number",
            "example": 56.27
          },
          "high": {
            "type": "number",
            "example": 56.32
          },
          "low": {
            "type": "number",
            "example": 56.27
          }
        }
      },
      "sellVolume": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "sellVolume": {
            "type": "number",
            "example": 1798220.5481000019
          }
        }
      },
      "volumeDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "volumeDelta": {
            "type": "number",
            "example": 1798220.5481000019
          }
        }
      },
      "anchoredCVD": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1731582000
          },
          "cumulativeDelta": {
            "type": "number",
            "example": 37988.11845679252
          }
        }
      },
      "marketOrderCount": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1676286000
          },
          "buy": {
            "type": "number",
            "example": 530
          },
          "sell": {
            "type": "number",
            "example": 535
          },
          "total": {
            "type": "number",
            "example": 1065
          },
          "delta": {
            "type": "number",
            "example": -5
          }
        }
      },
      "limitOrderCount": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695208500
          },
          "buy": {
            "type": "number",
            "example": 402
          },
          "sell": {
            "type": "number",
            "example": 256
          },
          "total": {
            "type": "number",
            "example": 658
          },
          "delta": {
            "type": "number",
            "example": 146
          }
        }
      },
      "marketOrderAverageSize": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1676286000
          },
          "buy": {
            "type": "number",
            "example": 530
          },
          "sell": {
            "type": "number",
            "example": 535
          },
          "total": {
            "type": "number",
            "example": 1065
          },
          "delta": {
            "type": "number",
            "example": -5
          }
        }
      },
      "limitOrderAverageSize": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695210120
          },
          "buy": {
            "type": "number",
            "example": 63.125
          },
          "sell": {
            "type": "number",
            "example": 488.5
          },
          "total": {
            "type": "number",
            "example": 148.2
          },
          "delta": {
            "type": "number",
            "example": -425.375
          }
        }
      },
      "pdLevels": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691366700
          },
          "pdOpen": {
            "type": "number",
            "example": 29075.9
          },
          "pdHigh": {
            "type": "number",
            "example": 29274.5
          },
          "pdLow": {
            "type": "number",
            "example": 28682.3
          },
          "pdEq": {
            "type": "number",
            "example": 28978.4
          }
        }
      },
      "pwLevels": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724025600
          },
          "pdOpen": {
            "type": "number",
            "example": 58693.1
          },
          "pdHigh": {
            "type": "number",
            "example": 61839.7
          },
          "pdLow": {
            "type": "number",
            "example": 55969
          },
          "pdEq": {
            "type": "number",
            "example": 58904.35
          }
        }
      },
      "pmLevels": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1719792000
          },
          "pdOpen": {
            "type": "number",
            "example": 67577.9
          },
          "pdHigh": {
            "type": "number",
            "example": 72144
          },
          "pdLow": {
            "type": "number",
            "example": 58218
          },
          "pdEq": {
            "type": "number",
            "example": 65181
          }
        }
      },
      "slippage": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1676286000
          },
          "max": {
            "type": "number",
            "example": 53
          },
          "averageMax": {
            "type": "number",
            "example": 123
          },
          "total": {
            "type": "number",
            "example": -56
          }
        }
      },
      "openInterest": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "open": {
            "type": "number",
            "example": 3298101915.6755
          },
          "low": {
            "type": "number",
            "example": 3297517559.4792995
          },
          "high": {
            "type": "number",
            "example": 3297517559.4792995
          },
          "close": {
            "type": "number",
            "example": 3297517559.4792995
          }
        }
      },
      "openInterestDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "openInterestDelta": {
            "type": "number",
            "example": -390976.8887000084
          }
        }
      },
      "anchoredOIDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1731110400
          },
          "cumulativeDelta": {
            "type": "number",
            "example": -174231946.92699814
          }
        }
      },
      "cumulativeLiqLevel": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "example": 1665047820
          },
          "totalLongLiquidationSize": {
            "type": "number",
            "example": 19172200
          },
          "totalLongLiquidationCount": {
            "type": "number",
            "example": 3
          },
          "totalShortLiquidationSize": {
            "type": "number",
            "example": 5377000
          },
          "totalShortLiquidationCount": {
            "type": "number",
            "example": 1
          },
          "totalSizeLiquidationDelta": {
            "type": "number",
            "example": 13795200
          },
          "totalCountLiquidationDelta": {
            "type": "number",
            "example": 2
          }
        }
      },
      "liquidationLevels": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "example": 1665047820
          },
          "creationDate": {
            "type": "integer",
            "example": 1664972100
          },
          "size": {
            "type": "number",
            "example": 5377000
          },
          "price": {
            "type": "number",
            "example": 20705.260499999997
          },
          "leverage": {
            "type": "string",
            "example": "25x"
          },
          "side": {
            "type": "string",
            "example": "short"
          },
          "openDuration": {
            "type": "number",
            "example": 81600
          }
        }
      },
      "liquidation": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longLiquidation": {
            "type": "number",
            "example": 32050
          },
          "shortLiquidation": {
            "type": "number",
            "example": 40
          }
        }
      },
      "liquidationHeatmap": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "example": 1694433600
          },
          "size": {
            "type": "number",
            "example": 0
          },
          "startingPrice": {
            "type": "number",
            "example": 21443.6
          },
          "endingPrice": {
            "type": "number",
            "example": 21493.6
          },
          "side": {
            "type": "string",
            "example": "long"
          }
        }
      },
      "averageLeverageUsed": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "avgLongLev": {
            "type": "number",
            "example": 8.591
          },
          "avgShortLev": {
            "type": "number",
            "example": 10.07
          }
        }
      },
      "averageLeverageDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "avgLevDelta": {
            "type": "number",
            "example": -1.479
          }
        }
      },
      "fundingRate": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "fundingRate": {
            "type": "number",
            "example": 0.0001436
          },
          "predicitiveFundingRate": {
            "type": "number",
            "example": 0.0007355
          }
        }
      },
      "binanceGlobalAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 54.87
          },
          "shortPct": {
            "type": "number",
            "example": 45.129
          },
          "lsRatio": {
            "type": "number",
            "example": 1.2158
          }
        }
      },
      "anchoredBinanceGlobalAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1735603200
          },
          "cumulativeLongPct": {
            "type": "number",
            "example": 0
          },
          "cumulativeShortPct": {
            "type": "number",
            "example": 0
          }
        }
      },
      "binanceTopTraderAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 56.599999999999994
          },
          "shortPct": {
            "type": "number",
            "example": 43.4
          },
          "lsRatio": {
            "type": "number",
            "example": 1.304147465437788
          }
        }
      },
      "anchoredBinanceTopTraderAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1735761600
          },
          "cumulativeLongPct": {
            "type": "number",
            "example": 0
          },
          "cumulativeShortPct": {
            "type": "number",
            "example": 0
          }
        }
      },
      "binanceTopTraderPositions": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 56.599999999999994
          },
          "shortPct": {
            "type": "number",
            "example": 43.4
          },
          "lsRatio": {
            "type": "number",
            "example": 1.304147465437788
          }
        }
      },
      "anchoredBinanceTopTraderPositions": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1735761600
          },
          "cumulativeLongPct": {
            "type": "number",
            "example": 0
          },
          "cumulativeShortPct": {
            "type": "number",
            "example": 0
          }
        }
      },
      "binanceTrueRetailLongShort": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724315400
          },
          "longPct": {
            "type": "number",
            "example": 54.99499999999999
          },
          "shortPct": {
            "type": "number",
            "example": 45.00500000000001
          }
        }
      },
      "binanceWhaleRetailDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1682553600
          },
          "whaleRetailDelta": {
            "type": "number",
            "example": -27.610000000000007
          }
        }
      },
      "anchoredBinanceWhaleRetailDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1735344000
          },
          "cumulativeWhaleRetailDelta": {
            "type": "number",
            "example": 0
          }
        }
      },
      "traderSentimentGap": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1736161800
          },
          "trader_sentiment_gap": {
            "type": "number",
            "example": 4.175000000000004
          }
        }
      },
      "whalePositionDominance": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1736232600
          },
          "whale_position_dominance": {
            "type": "number",
            "example": 17.020000000000003
          }
        }
      },
      "bybitGlobalAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1724316300
          },
          "longPct": {
            "type": "number",
            "example": 0.5575
          },
          "shortPct": {
            "type": "number",
            "example": 0.5575
          },
          "lsRatio": {
            "type": "number",
            "example": 1.2598870056497176
          }
        }
      },
      "huobiTopTraderAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 0.175
          },
          "shortPct": {
            "type": "number",
            "example": 0.825
          },
          "lsRatio": {
            "type": "number",
            "example": 0.21212121212121213
          }
        }
      },
      "huobiTopTraderAccountsQuarterly": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1695719820
          },
          "longPct": {
            "type": "number",
            "example": 0.125
          },
          "shortPct": {
            "type": "number",
            "example": 0.875
          },
          "lsRatio": {
            "type": "number",
            "example": 0.14285714285714285
          }
        }
      },
      "huobiTopTraderPositions": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 0.125
          },
          "shortPct": {
            "type": "number",
            "example": 0.875
          },
          "lsRatio": {
            "type": "number",
            "example": 0.14285714285714285
          }
        }
      },
      "huobiTopTraderPositionsQuarterly": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 0.125
          },
          "shortPct": {
            "type": "number",
            "example": 0.875
          },
          "lsRatio": {
            "type": "number",
            "example": 0.14285714285714285
          }
        }
      },
      "netLongShort": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691895600
          },
          "netLongs": {
            "type": "number",
            "example": 143148.06752739966
          },
          "netShorts": {
            "type": "number",
            "example": 1380851.9324726004
          }
        }
      },
      "anchoredCLS": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1731110400
          },
          "cumulativeNetLongs": {
            "type": "number",
            "example": -12209539.330233138
          },
          "cumulativeNetShorts": {
            "type": "number",
            "example": -10690860.669766858
          }
        }
      },
      "netLongShortDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691747820
          },
          "netLongShortDelta": {
            "type": "number",
            "example": -1680200
          }
        }
      },
      "anchoredCLSD": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1731499200
          },
          "cumulativeDelta": {
            "type": "number",
            "example": -695096.796802564
          }
        }
      },
      "okxGlobalAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 63.76811594202898
          },
          "shortPct": {
            "type": "number",
            "example": 36.23188405797102
          },
          "lsRatio": {
            "type": "number",
            "example": 1.7599999999999993
          }
        }
      },
      "okxTopTraderAccounts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1665047820
          },
          "longPct": {
            "type": "number",
            "example": 63.76811594202898
          },
          "shortPct": {
            "type": "number",
            "example": 36.23188405797102
          },
          "lsRatio": {
            "type": "number",
            "example": 1.7599999999999993
          }
        }
      },
      "okxWhaleRetailDelta": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1683417600
          },
          "whaleRetailDelta": {
            "type": "number",
            "example": -5.805907172995783
          }
        }
      },
      "bitmexLeaderboardNotionalProfit": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1696204800
          },
          "total": {
            "type": "number",
            "example": 5951677969310
          }
        }
      },
      "bitmexLeaderboardROEProfit": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1696204800
          },
          "total": {
            "type": "number",
            "example": 372736.4335339701
          }
        }
      },
      "fearAndGreed": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691657100
          },
          "value": {
            "type": "number",
            "example": 53
          }
        }
      },
      "marginLendingRatio": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691659200
          },
          "marginLendingRatio": {
            "type": "number",
            "example": 13.7318
          }
        }
      },
      "trollbox": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1693213200
          },
          "long": {
            "type": "number",
            "example": 30000
          },
          "short": {
            "type": "number",
            "example": -50000
          }
        }
      },
      "userBotRatio": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1692180900
          },
          "users": {
            "type": "number",
            "example": 1916
          },
          "bots": {
            "type": "number",
            "example": 78022
          },
          "ubRatio": {
            "type": "number",
            "example": 0.9760314243538742
          }
        }
      },
      "stablecoinPremiumP2P": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1691987220
          },
          "usdcPremium": {
            "type": "number",
            "example": 100.95
          },
          "usdtPremium": {
            "type": "number",
            "example": 100.6
          }
        }
      },
      "wbtcMintBurn": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1693540800
          },
          "mint": {
            "type": "number",
            "example": 9984000000
          },
          "burn": {
            "type": "number",
            "example": 0
          }
        }
      },
      "openInterestProfile": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "integer",
            "example": 1678755600
          },
          "endDate": {
            "type": "integer",
            "example": 1678842000
          },
          "currentPrice": {
            "type": "number",
            "example": 0.4039
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "type": "number",
                  "example": 0.3978
                },
                "size": {
                  "type": "number",
                  "example": -304510.68803635985
                }
              }
            },
            "example": [
              {
                "price": 0.3978,
                "size": -304510.68803635985
              },
              {
                "price": 0.3977,
                "size": -24167.102670429274
              },
              {
                "price": 0.3966,
                "size": -21533.783443760127
              }
            ]
          }
        }
      },
      "volumeProfile": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "integer",
            "example": 1678755600
          },
          "endDate": {
            "type": "integer",
            "example": 1678842000
          },
          "currentPrice": {
            "type": "number",
            "example": 0.4039
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "price": {
                  "type": "number",
                  "example": 0.3978
                },
                "size": {
                  "type": "number",
                  "example": -304510.68803635985
                }
              }
            },
            "example": [
              {
                "price": 0.3978,
                "size": -304510.68803635985
              },
              {
                "price": 0.3977,
                "size": -24167.102670429274
              },
              {
                "price": 0.3966,
                "size": -21533.783443760127
              }
            ]
          }
        }
      },
      "transferofcontracts": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "transfer_of_contracts": {
            "type": "number",
            "example": 2973986.7339999946
          }
        }
      },
      "participationratio": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "participation_ratio": {
            "type": "number",
            "example": 0.27843641118409124
          }
        }
      },
      "catalog": {
        "type": "object",
        "properties": {
          "binance": {
            "type": "string",
            "example": ["BTC", "ETH", "ADA", "DOT"]
          },
          "bybit": {
            "type": "string",
            "example": ["BTC", "ETH"]
          }
        }
      },
      "bidsAskSpread": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "max": {
            "type": "number",
            "example": 0.27843641118409124
          },
          "avgSpread": {
            "type": "number",
            "example": 0.27843641118409124
          }
        }
      },
      "anchoredLLC": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "totalCount": {
            "type": "number",
            "example": 84
          }
        }
      },
      "anchoredCLLCD": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "totalCount": {
            "type": "number",
            "example": 84
          }
        }
      },
      "anchoredLLS": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "totalSize": {
            "type": "number",
            "example": 13639435230.2304
          }
        }
      },
      "anchoredCLLSD": {
        "type": "object",
        "properties": {
          "openDate": {
            "type": "integer",
            "example": 1698326940
          },
          "totalSize": {
            "type": "number",
            "example": 13639435230.2304
          }
        }
      },
      "remainingHitBalance": {
        "type": "object",
        "properties": {
          "remaining_hits": {
            "type": "number",
            "example": 1999788
          }
        }
      },
      "Error400": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Bad Request"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "Error401": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Unauthorized"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "Error403": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Access Denied"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "Error404": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Not Found"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "Error429": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Limit Exceeded"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "Error500": {
        "properties": {
          "message": {
            "type": "string",
            "default": "Internal Server error"
          }
        },
        "required": ["error"],
        "type": "object"
      }
    }
  }